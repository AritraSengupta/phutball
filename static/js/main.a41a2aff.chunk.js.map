{"version":3,"sources":["utils.js","components/GridMember.js","components/GridPoint.js","components/GridLayout.js","AI/index.js","components/Board.js","components/PhutBall.js","App.js","reportWebVitals.js","index.js"],"names":["PLAYER","EKS","name","winningRow","abbv","OHS","BOARDSTATE","CURRENTMOVE","tryToMoveBall","start","end","data","newData","cloneDeep","isValidMove","xPaces","x","yPaces","y","paces","Math","max","abs","i","nextX","nextY","playersJumped","current","player","findAllFutureBallPos","currentPos","allDirections","j","positions","k","length","nextRow","nextCol","jumps","currentData","winningRowEKS","winningRowOHS","o","winning","losing","getLayout","gridSize","ball","players","row","push","border","playerAllowed","ballAllowed","includes","findBallPos","ballPos","checkIfCurrentPlayerCanWin","futurePos","currentPlayer","ifWon","state","Object","keys","forEach","values","v","baseStyle","position","borderRadius","width","height","background","transform","styles","cursor","borderStyle","borderColor","validMove","GridMember","props","column","type","onDragStart","onDragEnd","currentBoardState","draggable","dragProps","style","wrapper","display","gridTemplateColumns","entity","boxSizing","tl","borderBottom","borderRight","tr","colMax","borderLeft","bl","rowMax","borderTop","br","gridMember","marginTop","GridPoint","ballPosType","undefined","getType","onDragOver","onDrop","e","onClick","addPlayer","rows","columns","textAlign","fontWeight","fontSize","GridLayout","futureBallPos","showSuggestion","wonPlayer","loading","showModal","WIN","message","LOADING","HIDE","modalsMessages","getKey","rowNumber","columnNumber","map","idx","cdx","findAllAIPaths","visited","findPath","currPos","curData","currPath","result","rowArray","key","cells","cellArray","newCursor","Number","path","findGlobalOptimalPath","paths","initPos","stack","globalDistance","globalPath","globalPos","top","pop","Array","isArray","findLocalOptima","finalArray","finalPos","finalDistance","pos","slice","distance","findPlayerPos","Infinity","currData","curDistance","Board","config","ballPosStart","playerPos","layout","updateInProgress","bind","resetBoardState","moveBall","onWin","makeBotMove","animateMovement","prevProps","prevState","prevPlayer","prevBoardState","this","isManual","bot","hasWon","a","setState","switchPlayer","disableButtons","noMovement","setTimeout","Promise","resolve","target","getAttribute","dataTransfer","setData","rowOrigin","getData","columnOrigin","preventDefault","currentMove","updateMove","oldData","startPoint","endPoint","checkIfCurrentWinningPos","changeBoardState","addScore","resetBoard","setPlayerWon","React","Component","goal","flex","PhutBall","score","boardConfig","buttonDisabled","handicap","value","showRules","toggleAuto","disableButtonsToggle","handleHandicapNameChange","handleandicapValueChange","toggleRules","bool","move","boardstate","alignContent","alignItems","flexFlow","right","animation","marginBottom","margin","float","padding","textDecoration","disabled","paddingTop","onChange","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a41a2aff.chunk.js","sourcesContent":["import { cloneDeep } from 'lodash';\r\n\r\nexport const MODES = {\r\n  MANUAL: 'MANUAL',\r\n  AUTO: 'AUTO',\r\n};\r\nexport const PLAYER = {\r\n  EKS: {\r\n    name: 'Player 1',\r\n    winningRow: 0,\r\n    abbv: 'EKS',\r\n  },\r\n  OHS: {\r\n    name: 'Player 2',\r\n    winningRow: 18,\r\n    abbv: 'OHS',\r\n  }\r\n};\r\n\r\nexport const BOARDSTATE = {\r\n  PRESTART: 'PRESTART',\r\n  PLAYING: 'PLAYING',\r\n  WIN: 'WON',\r\n  DRAW: 'DRAW',\r\n};\r\n\r\nexport const CURRENTMOVE = {\r\n  BALL: 'BALL',\r\n  ADDPLAYER: 'ADDPLAYER',\r\n};\r\n\r\nexport const tryToMoveBall = (start, end, data) => {\r\n  const newData = cloneDeep(data);\r\n  let isValidMove = true;\r\n  const xPaces = end.x - start.x;\r\n  const yPaces = end.y - start.y;\r\n  const paces = Math.max(Math.abs(xPaces), Math.abs(yPaces));\r\n  if (paces === 0) return; // no movement\r\n  let i = 1;\r\n  let nextX = start.x;\r\n  let nextY = start.y;\r\n  let playersJumped = 0;\r\n\r\n  if (Math.abs(xPaces) === Math.abs(yPaces) || xPaces === 0 || yPaces === 0) {\r\n    while (i < paces) {\r\n      nextX += (xPaces/paces);\r\n      nextY += (yPaces/paces);\r\n      const current = newData[nextX][nextY];\r\n      if (!current.player) { // no player present so cannot jump over\r\n        isValidMove = false;\r\n        break;\r\n      } else {\r\n        current.player = false; // remove player\r\n        playersJumped += 1;\r\n      }\r\n      i += 1;\r\n    }\r\n  } else { // some random movement which is not valid\r\n    isValidMove = false;\r\n  }\r\n\r\n  return {\r\n    data: newData,\r\n    isValidMove,\r\n    playersJumped,\r\n  };\r\n}\r\n\r\nexport const findAllFutureBallPos = (currentPos, data) => {\r\n  const allDirections = [\r\n    { j: -1, i: 1 }, //0\r\n    { j: 0, i: 1 }, //1\r\n    { j: 1, i: 1 }, //2\r\n    { j: 1, i: 0 }, // 3\r\n    { j: 1, i: -1 },//4\r\n    { j: 0, i: -1 }, //5\r\n    { j: -1, i: -1 },//6\r\n    { j: -1, i: 0 }, //7\r\n  ];\r\n  const positions = {};\r\n  for (let k = 0; k < allDirections.length; k += 1) {\r\n    let nextRow = currentPos.x;\r\n    let nextCol = currentPos.y;\r\n    let jumps = 0;\r\n    while (1) {\r\n      nextRow += allDirections[k].i;\r\n      nextCol += allDirections[k].j;\r\n      const currentData = data[nextRow] && data[nextRow][nextCol];\r\n      if (currentData && currentData.player) {\r\n        jumps++;\r\n        continue; // If its a player move on to the next\r\n      } else {\r\n        const winningRowEKS = nextRow <= 0;\r\n        const winningRowOHS = nextRow >= data.length - 1;\r\n        if (winningRowEKS || winningRowOHS || (currentData && !currentData.player)) { //If at the edge or out of bounds on top or bottom\r\n          const o = {};\r\n          if (winningRowEKS) { // someone is winning\r\n            o.winning = PLAYER.EKS;\r\n            o.losing = PLAYER.OHS;\r\n          } else if (winningRowOHS) {\r\n            o.winning = PLAYER.OHS;\r\n            o.losing = PLAYER.EKS;\r\n          }\r\n          if(jumps > 0) {\r\n            positions[nextRow] = positions[nextRow] || {};\r\n            positions[nextRow][nextCol] = { jumps, ...o }\r\n          }\r\n        } \r\n        break; // found solution or not\r\n      }\r\n    }\r\n  }\r\n  return positions;\r\n}\r\n\r\nexport const getLayout = (gridSize, ball, players) => {\r\n  const data = [];\r\n  for (let i = 0; i < gridSize[0]; i += 1) {\r\n    const row = [];\r\n    for (let j = 0; j < gridSize[1]; j += 1) {\r\n      row.push({\r\n        border: [true, true, true, true],\r\n        playerAllowed: true,\r\n        ballAllowed: true,\r\n        player: players.includes(`${i}-${j}`),\r\n        ball: ball === `${i}-${j}`,\r\n      })\r\n    }\r\n    data.push(row);\r\n  }\r\n  return data;\r\n}\r\n\r\nexport const findBallPos = (data) => {\r\n  const ballPos = {};\r\n  for (let i = 0; i < data.length; i += 1) {\r\n    for (let j = 0; j < data[0].length; j += 1 ) {\r\n      if (data[i][j].ball) {\r\n        ballPos.x = i;\r\n        ballPos.y = j;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return ballPos;\r\n}\r\n\r\nexport const findPlayerPos = (data) => {\r\n  const playerPos = [];\r\n  for (let i = 0; i < data.length; i += 1) {\r\n    for (let j = 0; j < data[0].length; j += 1 ) {\r\n      if (data[i][j].player) {\r\n        playerPos.push({x: i, y: j});\r\n      }\r\n    }\r\n  }\r\n  \r\n  return playerPos;\r\n}\r\n\r\n// To check if future position can lead to auto winning\r\nexport const checkIfCurrentPlayerCanWin = (futurePos, currentPlayer) => {\r\n  const ifWon = {state: false};\r\n  Object.keys(futurePos).forEach(x => {\r\n    Object.values(futurePos[x]).forEach(v => {\r\n      if (v.winning && v.winning.name === currentPlayer.name) {\r\n        ifWon.state = true;\r\n        ifWon.player = currentPlayer;\r\n      }\r\n    })\r\n  })\r\n  return ifWon;\r\n}\r\n\r\n// TO check if current position is end\r\nexport const checkIfCurrentWinningPos = (end) => {\r\n  let hasWon = {state: false};\r\n  if (end.x <= 0) {// check manual movement for own goal\r\n    hasWon = {state: true, player: PLAYER.EKS};\r\n  } else if (end.x >= 18) {\r\n    hasWon = {state: true, player: PLAYER.OHS};\r\n  }\r\n  return hasWon;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { BOARDSTATE } from '../utils';\r\n\r\nconst baseStyle = {\r\n  position: 'absolute',\r\n  borderRadius: '50%',\r\n  width: '10px',\r\n  height: '10px',\r\n  background: '#000000',\r\n  transform: 'translate(5px, 5px)',\r\n};\r\nconst styles = {\r\n  player: {\r\n    ...baseStyle,\r\n  },\r\n  ball: {\r\n    ...baseStyle,\r\n    width: '11px',\r\n    height: '11px',\r\n    background: '#F1C40F',\r\n    cursor: 'not-allowed',\r\n  },\r\n  winning: {\r\n    ...baseStyle,\r\n    borderStyle: 'dotted',\r\n    borderColor: 'rgb(0, 200, 0)',\r\n    background: 'rgb(0, 200, 0, 0.6)',\r\n  },\r\n  losing: {\r\n    ...baseStyle,\r\n    borderStyle: 'dotted',\r\n    borderColor: 'rgb(203, 67, 53)',\r\n    background: 'rgb(203, 67, 53, 0.6)',\r\n\r\n  },\r\n  validMove: {\r\n    ...baseStyle,\r\n    borderStyle: 'dotted',\r\n    borderColor: '#3498DB',\r\n    background: 'rgb(52, 152, 219, 0.6)',\r\n  },\r\n}\r\n\r\nconst GridMember = (props) => {\r\n  const { row, column, type, onDragStart, onDragEnd, currentBoardState } = props;\r\n  if (!type) return null;\r\n  const draggable = currentBoardState !== BOARDSTATE.PRESTART;\r\n  const dragProps = type === 'ball' ? {\r\n    draggable,\r\n    onDragStart,\r\n    onDragEnd,\r\n  } : {};\r\n  const style = {...styles[type], ...(draggable && type === 'ball' && { cursor: 'grabbing' })}\r\n  return <div\r\n    style={style}\r\n    {...dragProps}\r\n    row={row}\r\n    column={column}\r\n  ></div>\r\n}\r\n\r\nexport default GridMember;","import React from 'react';\r\nimport GridMember from './GridMember';\r\n\r\n// Component handling the grid element where a ball or a player can be placed\r\nconst styles = {\r\n  wrapper: {\r\n    display: 'grid',\r\n    gridTemplateColumns: 'repeat(2, 1fr)',\r\n    width: '20px',\r\n  },\r\n  entity: {\r\n    width: '10px',\r\n    height: '10px',\r\n    background: '#196F3D',\r\n    boxSizing: 'border-box',\r\n  },\r\n  tl: (row, column) => ({\r\n    ...column !== 0 && { borderBottom: '1px solid black' },\r\n    ...row !== 0 && { borderRight: '1px solid black' },\r\n  }),\r\n  tr: (row, column, colMax) => ({\r\n    ...column !== colMax - 1 && {borderBottom: '1px solid black'},\r\n    ...row !==0 && {borderLeft: '1px solid black'},\r\n  }),\r\n  bl: (row, column, rowMax) => ({\r\n    ...column !== 0 && {borderTop: '1px solid black'},\r\n    ...row !== rowMax - 1 && {borderRight: '1px solid black'},\r\n  }),\r\n  br: (row, column, rowMax, colMax) => ({\r\n    ...column !== colMax - 1 && {borderTop: '1px solid black'},\r\n    ...row !== rowMax - 1 && {borderLeft: '1px solid black'},\r\n  }),\r\n  gridMember: {\r\n    marginTop: '-15px',\r\n  }\r\n};\r\n\r\nfunction getType(ball, player, ballPosType, currentPlayer) {\r\n  let type = undefined;\r\n  if (ball) {\r\n    type = 'ball';\r\n  } else if (player) {\r\n    type = 'player';\r\n  } else if (ballPosType) {\r\n    if(ballPosType.winning === currentPlayer) {\r\n      type = 'winning';\r\n    } else if (ballPosType.losing === currentPlayer) {\r\n      type = 'losing';\r\n    } else {\r\n      type = 'validMove';\r\n    }\r\n  }\r\n  return type;\r\n}\r\nconst GridPoint = (props) => {\r\n  const { row, column, ballPosType, player, ball, currentPlayer, currentBoardState, rowMax, colMax } = props;\r\n  const type = getType(ball, player, ballPosType, currentPlayer);\r\n\r\n  return (\r\n    <div\r\n      style={styles.wrapper}\r\n      row={row}\r\n      column={column}\r\n      onDragOver={props.onDragOver}\r\n      onDrop={(e) => props.onDrop(e, row, column)}\r\n      onClick={() => props.addPlayer(row, column)}\r\n    >\r\n      <div style={{...styles.entity, ...styles.tl(row, column)}}></div>\r\n      <div style={{...styles.entity, ...styles.tr(row, column, colMax)}}></div>\r\n      <div style={{...styles.entity, ...styles.bl(row, column, rowMax)}}></div>\r\n      <div style={{...styles.entity, ...styles.br(row, column, rowMax, colMax)}}></div>\r\n      {type && <GridMember\r\n        type={type}\r\n        onDragStart={props.onDragStart}\r\n        onDragEnd={props.onDragEnd}\r\n        row={row}\r\n        column={column}\r\n        currentBoardState={currentBoardState}\r\n      />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GridPoint;","import React from 'react';\r\nimport { BOARDSTATE } from '../utils';\r\nimport GridPoint from './GridPoint';\r\n\r\nconst styles = {\r\n  wrapper: (rows, columns) => {\r\n    return ({\r\n      display: 'grid',\r\n      height: `${rows*20}px`,\r\n      width: `${columns*20}px`,\r\n      gridTemplateColumns: `repeat(${columns}, 1fr)`,\r\n    });\r\n  },\r\n  modal: (rows, columns) => {\r\n    return ({\r\n      position: 'absolute',\r\n      height: `${rows*20}px`,\r\n      width: `${columns*20}px`,\r\n      background: 'rgb(255, 255, 244, 0.6)',\r\n      textAlign: 'center',\r\n      fontWeight: 600,\r\n      fontSize: '27px',\r\n    })\r\n  }\r\n};\r\n\r\nconst modalsMessages = (wonPlayer, loading, currentBoardState) => ({\r\n  WIN: {\r\n    state: currentBoardState === BOARDSTATE.WIN,\r\n    message: `${wonPlayer && wonPlayer.name} Won`\r\n  },\r\n  LOADING: {\r\n    state: loading,\r\n    message: `Loading Please Wait`\r\n  },\r\n  HIDE: {\r\n    state: false,\r\n  },\r\n});\r\n\r\nconst getKey = (currentBoardState, loading) => {\r\n  if (currentBoardState === BOARDSTATE.WIN) return 'WIN';\r\n  if (loading) return 'LOADING';\r\n  return 'HIDE';\r\n\r\n}\r\nconst GridLayout = (props) => {\r\n  const { data, futureBallPos, currentPlayer, currentBoardState, showSuggestion, wonPlayer, loading } = props;\r\n  const showModal = modalsMessages(wonPlayer, loading, currentBoardState)[getKey(currentBoardState, loading)];\r\n  const rowNumber = data.length;\r\n  const columnNumber = data[0].length;\r\n  return (\r\n    <div style={styles.wrapper(rowNumber, columnNumber)}>\r\n      {showModal.state && <div style={styles.modal(rowNumber, columnNumber)}>\r\n        <div style={{ marginTop: '150px' }}>{showModal.message}</div>\r\n      </div>}\r\n      {data.map((row, idx) => {\r\n        return row.map((column, cdx) => {\r\n          const ballPosType = currentBoardState !== BOARDSTATE.PRESTART \r\n            && showSuggestion \r\n            && futureBallPos[idx] \r\n            && futureBallPos[idx][cdx];\r\n          return (\r\n            <GridPoint\r\n              key={`${idx}-${cdx}`}\r\n              currentPlayer={currentPlayer}\r\n              currentBoardState={currentBoardState}\r\n              player={column.player}\r\n              ball={column.ball}\r\n              ballPosType={ballPosType}\r\n              row={idx}\r\n              column={cdx}\r\n              onDragOver={props.onDragOver}\r\n              onDragStart={props.onDragStart}\r\n              onDragEnd={props.onDragEnd}\r\n              onDrop={props.onDrop}\r\n              addPlayer={props.addPlayer}\r\n              rowMax={data.length}\r\n              colMax={data[0].length}\r\n            />\r\n          )\r\n        });\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GridLayout;","// This section will try to take advantage of utils functions created and come up with strategies\r\nimport { findAllFutureBallPos, tryToMoveBall } from \"../utils\";\r\n\r\nexport function findAllAIPaths(start, data) {\r\n  const visited = {};\r\n  function findPath(currPos, curData, currPath) {\r\n    if (visited[currPos.x] && visited[currPos.x][currPos.y]) {\r\n      return []; // no need to take this path as it has already been accounted for;\r\n    } else {\r\n      visited[currPos.x] = visited[currPos.x] || {};\r\n      visited[currPos.x][currPos.y] = true; // set as true\r\n    }\r\n\r\n    if (currPos.x <= 0 || currPos.x >= 18) {// We have crossed the boundary return\r\n      return currPath;\r\n    }\r\n    const positions = findAllFutureBallPos(currPos, curData);\r\n    const result = [];\r\n\r\n    const rowArray = Object.keys(positions);\r\n    if (rowArray.length > 0) { // there are valid positions to go to\r\n      for (let i = 0; i < rowArray.length; i += 1) {\r\n        const key = rowArray[i];\r\n        const cells = positions[key];\r\n        const cellArray = Object.keys(cells);\r\n        for (let j = 0; j < cellArray.length; j += 1) {\r\n          const newCursor = { x: Number(key), y: Number(cellArray[j]) };\r\n          const { data, isValidMove } = tryToMoveBall(currPos, newCursor, curData);\r\n\r\n          if (!isValidMove) return currPath; // Will most likely not occur since all paths are valid\r\n          const newPath = [...currPath, newCursor]; // add new valid cursor to the path\r\n          const path = findPath(newCursor, data, newPath);\r\n          path.length && result.push(path); // add only if there is some movement\r\n        }\r\n      }\r\n    } else { // no more places to go to\r\n      return currPath;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  const finalPaths = findPath(start, data, []);\r\n  return finalPaths;\r\n}\r\n\r\nexport function findGlobalOptimalPath(paths, currentPlayer, initPos) {\r\n  // Using stacks for dfs so that breaks can be used effectively\r\n  const stack = [paths];\r\n  let globalDistance = Math.abs(currentPlayer.winningRow - initPos.x);\r\n  let globalPath = [];\r\n  let globalPos = initPos;\r\n  while(stack.length) {\r\n    const top = stack.pop();\r\n    if (!Array.isArray(top[0])) { // found a sequence\r\n      const {\r\n        finalArray,\r\n        finalPos,\r\n        winning,\r\n        finalDistance,\r\n      } = findLocalOptima(top, initPos, currentPlayer);\r\n      if (finalDistance < globalDistance) {\r\n        globalPath = finalArray;\r\n        globalPos = finalPos;\r\n        globalDistance = finalDistance;\r\n      }\r\n      if (winning) { // Found winning combo, break and finish game\r\n        break;\r\n      }\r\n    } else {\r\n      for (let i = 0; i < top.length; i += 1) {\r\n        stack.push(top[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    globalDistance,\r\n    globalPath,\r\n    globalPos,\r\n  };\r\n}\r\n\r\nfunction findLocalOptima(path, pos, currentPlayer) {\r\n  let finalArray = [];\r\n  let finalPos = pos;\r\n  let winning = false;\r\n  let finalDistance = Math.abs(currentPlayer.winningRow - pos.x);\r\n  for (let i = 0; i < path.length; i += 1) {\r\n    if (currentPlayer.winningRow === 0 && path[i].x <= 0) {\r\n      // Winning combo found\r\n      finalArray = path.slice(0, i + 1);\r\n      finalPos = path[i];\r\n      winning = true;\r\n      finalDistance = 0;\r\n      break;\r\n    } else if (currentPlayer.winningRow > 0 && path[i].x >= currentPlayer.winningRow) {\r\n      // Winning combo found\r\n      finalArray = path.slice(0, i + 1);\r\n      finalPos = path[i];\r\n      winning = true;\r\n      finalDistance = 0;\r\n      break;\r\n    } else { // Keep seeing the distance from the goal, if decreases then keep a record\r\n      const distance = Math.abs(currentPlayer.winningRow - path[i].x);\r\n      if (distance < finalDistance) {\r\n        finalDistance = distance;\r\n        finalPos = path[i];\r\n        finalArray = path;\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    finalArray,\r\n    finalPos,\r\n    winning,\r\n    finalDistance,\r\n  };\r\n}\r\n\r\nexport function findPlayerPos(currPos, currentPlayer, data) {\r\n  let distance = Infinity;\r\n  let position = { x: 0, y: 0 };\r\n  for (let i = data.length - 1; i >= 0; i -= 1) {\r\n    for (let j = data[0].length - 1; j >= 0; j -= 1) {\r\n      const currData = data[i][j];\r\n      if (!currData.player && !currData.ball) {\r\n        const curDistance = Math.abs(i - currPos.x) + Math.abs(j - currPos.y);\r\n        if (curDistance < distance) {\r\n          distance = curDistance;\r\n          position.x = i;\r\n          position.y = j;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return position;\r\n}","import React from 'react';\r\nimport GridLayout from './GridLayout';\r\n\r\nimport {\r\n  BOARDSTATE,\r\n  CURRENTMOVE,\r\n  getLayout,\r\n  findBallPos,\r\n  findAllFutureBallPos,\r\n  checkIfCurrentWinningPos,\r\n  checkIfCurrentPlayerCanWin,\r\n  tryToMoveBall,\r\n  PLAYER,\r\n} from '../utils';\r\n\r\nimport { findAllAIPaths, findGlobalOptimalPath, findPlayerPos } from '../AI';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { config: { gridSize, ballPosStart, playerPos } } = props;\r\n    const layout = getLayout(gridSize, `${ballPosStart.x}-${ballPosStart.y}`, playerPos);\r\n    const futurePos = findAllFutureBallPos(ballPosStart, layout);\r\n\r\n    this.state = {\r\n      data: layout,\r\n      futureBallPos: futurePos,\r\n      showSuggestion: false,\r\n      loading: false,\r\n      ballPosStart: props.config.ballPosStart,\r\n    };\r\n    this.updateInProgress = false;\r\n    this.onDragOver = this.onDragOver.bind(this);\r\n    this.onDrop = this.onDrop.bind(this);\r\n    this.onDragStart = this.onDragStart.bind(this);\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n    this.resetBoardState = this.resetBoardState.bind(this);\r\n    this.moveBall = this.moveBall.bind(this);\r\n    this.addPlayer = this.addPlayer.bind(this);\r\n    this.onWin = this.onWin.bind(this);\r\n    this.makeBotMove = this.makeBotMove.bind(this);\r\n    this.animateMovement = this.animateMovement.bind(this);\r\n  }\r\n\r\n  static getDerivedStateFromProps(props) {\r\n    const { config: { ballPosStart } } = props;\r\n    return {\r\n      ballPosStart,\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { currentPlayer: prevPlayer, currentBoardState: prevBoardState } = prevProps;\r\n    const { currentPlayer, currentBoardState, isManual, bot } = this.props;\r\n    const { loading, ballPosStart } = this.state;\r\n    const { ballPosStart: prevballPosStart } = prevState;\r\n\r\n    if (prevballPosStart.x !== ballPosStart.x\r\n      || (prevBoardState !== currentBoardState && currentBoardState === BOARDSTATE.PRESTART)) { // config changed just update board and reset\r\n      this.resetBoardState();\r\n      return;\r\n    }\r\n    // onWin this is called again especially if player changes\r\n    // therefore to compensate we make sure that if board is prestart don't update score\r\n    if (currentBoardState === BOARDSTATE.PRESTART) {\r\n      return;\r\n    }\r\n\r\n    if (prevPlayer.name !== currentPlayer.name\r\n      && currentPlayer.name === bot.name\r\n      && isManual === false\r\n      && loading === false\r\n    ) {\r\n      this.makeBotMove();\r\n    } else if (prevPlayer.name !== currentPlayer.name // Player name has changed\r\n      || (prevBoardState !== currentBoardState && currentBoardState === BOARDSTATE.PLAYING)) { // Board state has gone from something to playing\r\n      const { futureBallPos } = this.state;\r\n      const hasWon = checkIfCurrentPlayerCanWin(futureBallPos, currentPlayer);\r\n      if (hasWon.state) {\r\n        this.onWin(hasWon.player);\r\n      }\r\n    }\r\n  }\r\n\r\n  async makeBotMove() {\r\n    this.setState({ loading: true });\r\n    const { data } = this.state;\r\n    this.updateInProgress = true;\r\n    const { currentPlayer, switchPlayer, disableButtons } = this.props;\r\n    disableButtons(true); // Disable all the control buttons while the movement is occuring\r\n    const currPos = findBallPos(data);\r\n    const paths = findAllAIPaths(currPos, data);\r\n    const {\r\n      globalPath,\r\n      globalDistance,\r\n    } = findGlobalOptimalPath(paths, currentPlayer, currPos);\r\n    const noMovement = globalPath.length === 1 && globalPath[0].x === currPos.x && globalPath[0].y === currPos.y;\r\n    if (globalDistance === 0) { //sure win\r\n      this.onWin(currentPlayer);\r\n    } else if (globalPath.length === 0 || noMovement) {\r\n      const result = findPlayerPos(currPos, currentPlayer, data);\r\n      this.addPlayer(result.x, result.y);\r\n    } else {\r\n      let start = currPos;\r\n      globalPath.forEach(async pos => {\r\n        start = await this.animateMovement(start, pos);\r\n      });\r\n    }\r\n    setTimeout(() => {\r\n      this.updateInProgress = false;\r\n      this.setState({ loading: false });\r\n      disableButtons(false); // enable buttons\r\n      switchPlayer(PLAYER.EKS); // switch to non bot\r\n    }, 1000);\r\n  }\r\n\r\n  async animateMovement(start, pos) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        this.moveBall(start, pos);\r\n        resolve(start);\r\n      }, 10);\r\n    });\r\n  }\r\n\r\n  onDragStart(e) {\r\n    const row = e.target.getAttribute('row');\r\n    const column = e.target.getAttribute('column');\r\n    e.dataTransfer.setData('row', row);\r\n    e.dataTransfer.setData('column', column);\r\n    this.setState({ showSuggestion: true });\r\n  }\r\n\r\n  onDrop(e, row, column) {\r\n    const rowOrigin = e.dataTransfer.getData('row');\r\n    const columnOrigin = e.dataTransfer.getData('column');\r\n    const start = {\r\n      x: Number(rowOrigin),\r\n      y: Number(columnOrigin),\r\n    };\r\n    const end = {\r\n      x: row,\r\n      y: column,\r\n    };\r\n    this.onDragEnd(e);\r\n    this.moveBall(start, end);\r\n  }\r\n\r\n  onDragOver(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  onDragEnd(e) {\r\n    this.setState({ showSuggestion: false });\r\n  }\r\n\r\n  addPlayer(row, column) {\r\n    const { currentBoardState, switchPlayer, currentMove } = this.props;\r\n    if (currentMove === CURRENTMOVE.BALL) return; // already player has committed to a move\r\n    if (currentBoardState === BOARDSTATE.PRESTART) return; // game has not started\r\n    const { data } = this.state;\r\n    const current = data[row][column];\r\n    const { player, ball } = current;\r\n    if (!player && !ball) {\r\n      current.player = true;\r\n    }\r\n    const futureBallPos = findAllFutureBallPos(findBallPos(data), data);\r\n    this.setState({ data, futureBallPos });\r\n\r\n    switchPlayer();\r\n\r\n  }\r\n\r\n  moveBall(start, end) {\r\n    const { currentBoardState, currentPlayer, switchPlayer, updateMove } = this.props;\r\n    if (currentBoardState === BOARDSTATE.PRESTART) return;\r\n    const { data: oldData } = this.state;\r\n    const startPoint = oldData[start.x][start.y];\r\n    const endPoint = oldData[end.x] && oldData[end.x][end.y];\r\n    if (!endPoint) return; // endpoint does not exist\r\n    if (endPoint.ball || endPoint.player || !startPoint.ball) return; // cannot move since either not a ball or since player or ball present\r\n\r\n\r\n    // try to move the ball and remove the players in between\r\n    const { data, isValidMove, playersJumped } = tryToMoveBall(start, end, oldData);\r\n\r\n    if (!isValidMove || !playersJumped) return;\r\n    // move ball if valid move\r\n    data[start.x][start.y].ball = false;\r\n    data[end.x][end.y].ball = true;\r\n\r\n    // check to see if won\r\n    let hasWon = { state: false };\r\n    const futureBallPos = findAllFutureBallPos(end, data);\r\n\r\n    hasWon = checkIfCurrentWinningPos(end); // Check Current Position For Winning\r\n    if (!hasWon.state) {\r\n      hasWon = checkIfCurrentPlayerCanWin(futureBallPos, currentPlayer); // check if won for future\r\n    }\r\n    if (hasWon.state) {\r\n      this.onWin(hasWon.player);\r\n    } else { // otherwise continue\r\n      this.setState({ data, futureBallPos });\r\n      if (!futureBallPos || Object.keys(futureBallPos).length === 0) {\r\n        switchPlayer();\r\n      } else {\r\n        updateMove(CURRENTMOVE.BALL);\r\n      }\r\n    }\r\n  }\r\n\r\n  onWin(player) {\r\n    const { changeBoardState, addScore, resetBoard, setPlayerWon } = this.props;\r\n    changeBoardState(BOARDSTATE.WIN);\r\n    addScore(player);\r\n    setPlayerWon(player);\r\n    setTimeout(() => {\r\n      resetBoard();\r\n      this.resetBoardState();\r\n    }, 1000);\r\n  }\r\n\r\n  resetBoardState() {\r\n    const { config: { gridSize, ballPosStart, playerPos } } = this.props;\r\n    const layout = getLayout(gridSize, `${ballPosStart.x}-${ballPosStart.y}`, playerPos);\r\n    this.setState({ data: layout });\r\n  }\r\n\r\n  render() {\r\n    const { currentPlayer, currentBoardState, wonPlayer } = this.props;\r\n    const { data, futureBallPos, showSuggestion, loading } = this.state;\r\n    return (\r\n      <div>\r\n        <GridLayout\r\n          data={data}\r\n          futureBallPos={futureBallPos}\r\n          currentPlayer={currentPlayer}\r\n          currentBoardState={currentBoardState}\r\n          showSuggestion={showSuggestion}\r\n          onDragOver={this.onDragOver}\r\n          onDragStart={this.onDragStart}\r\n          onDragEnd={this.onDragEnd}\r\n          onDrop={this.onDrop}\r\n          addPlayer={this.addPlayer}\r\n          wonPlayer={wonPlayer}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Board from './Board.js';\r\n\r\nimport { PLAYER, BOARDSTATE } from '../utils';\r\n\r\nconst gridSize = [19, 15];\r\nconst ballPosStart = {x: 8, y: 7};\r\nconst playerPos = [];\r\n\r\nconst styles = {\r\n  goal: {\r\n    flex: 1,\r\n    width: '350px',\r\n    height: '30px',\r\n    background: '#28B463',\r\n    textAlign: 'center',\r\n  },\r\n};\r\n\r\nexport default class PhutBall extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentPlayer: PLAYER.EKS,\r\n      currentBoardState: BOARDSTATE.PRESTART,\r\n      score: {\r\n        EKS: 0,\r\n        OHS: 0,\r\n      },\r\n      currentMove: null,\r\n      boardConfig: {\r\n        gridSize,\r\n        ballPosStart: { ...ballPosStart },\r\n        playerPos,\r\n      },\r\n      wonPlayer: null,\r\n      isManual: true,\r\n      bot: PLAYER.OHS,\r\n      buttonDisabled: false,\r\n      handicap: {\r\n        name: PLAYER.EKS.name,\r\n        value: 0,\r\n      },\r\n      showRules: false,\r\n    };\r\n\r\n    this.switchPlayer = this.switchPlayer.bind(this);\r\n    this.changeBoardState = this.changeBoardState.bind(this);\r\n    this.addScore = this.addScore.bind(this);\r\n    this.updateMove = this.updateMove.bind(this);\r\n    this.resetBoard = this.resetBoard.bind(this);\r\n    this.setPlayerWon = this.setPlayerWon.bind(this);\r\n    this.toggleAuto = this.toggleAuto.bind(this);\r\n    this.disableButtonsToggle = this.disableButtonsToggle.bind(this);\r\n    this.handleHandicapNameChange = this.handleHandicapNameChange.bind(this);\r\n    this.handleandicapValueChange = this.handleandicapValueChange.bind(this);\r\n    this.toggleRules = this.toggleRules.bind(this);\r\n  }\r\n\r\n  toggleRules() {\r\n    const { showRules } = this.state;\r\n    this.setState({ showRules: !showRules });\r\n  }\r\n  handleHandicapNameChange(e) {\r\n    const value = e.target.value;\r\n    const { handicap, boardConfig } = this.state;\r\n    if (value === PLAYER.EKS.name) {\r\n      boardConfig.ballPosStart = {\r\n        ...boardConfig.ballPosStart,\r\n        x: ballPosStart.x - Number(handicap.value)\r\n      };\r\n    } else {\r\n      boardConfig.ballPosStart = {\r\n        ...boardConfig.ballPosStart,\r\n        x: ballPosStart.x + Number(handicap.value)\r\n      };\r\n    }\r\n    handicap.name = value;\r\n    this.setState({ handicap, boardConfig });\r\n  }\r\n\r\n  handleandicapValueChange(e) {\r\n    const value = e.target.value;\r\n    const { handicap, boardConfig } = this.state;\r\n    if (handicap.name === PLAYER.EKS.name) {\r\n      boardConfig.ballPosStart = {\r\n        ...boardConfig.ballPosStart,\r\n        x: ballPosStart.x - Number(value)\r\n      };\r\n    } else {\r\n      boardConfig.ballPosStart = {\r\n        ...boardConfig.ballPosStart,\r\n        x: ballPosStart.x + Number(value)\r\n      };\r\n    }\r\n    handicap.value = Number(value);\r\n    this.setState({ handicap, boardConfig });\r\n  }\r\n\r\n  switchPlayer(player) {\r\n    if (player) {\r\n      this.setState({ currentPlayer: player, currentMove: null });\r\n      return;\r\n    }\r\n    let { currentPlayer } = this.state;\r\n    if (currentPlayer === PLAYER.EKS) {\r\n      currentPlayer = PLAYER.OHS;\r\n    } else {\r\n      currentPlayer = PLAYER.EKS;\r\n    }\r\n    this.setState({ currentPlayer, currentMove: null });\r\n  }\r\n\r\n  disableButtonsToggle(bool) {\r\n    this.setState({ buttonDisabled: bool });\r\n  }\r\n\r\n  updateMove(move) {\r\n    this.setState({ currentMove: move });\r\n  }\r\n\r\n  changeBoardState(boardstate) {\r\n    this.setState({currentBoardState: boardstate});\r\n  }\r\n\r\n  addScore(player) {\r\n    const { score } = this.state;\r\n    score[player.abbv] += 1;\r\n    this.setState({score});\r\n  }\r\n\r\n  resetBoard() {\r\n    this.setState({\r\n      currentBoardState: BOARDSTATE.PRESTART,\r\n      currentPlayer: PLAYER.EKS,\r\n      wonPlayer: null,\r\n    })\r\n  }\r\n\r\n  toggleAuto() {\r\n    const { isManual } = this.state;\r\n    this.setState({ isManual: !isManual });\r\n  }\r\n\r\n  setPlayerWon(player) {\r\n    this.setState({ wonPlayer: player });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      currentPlayer,\r\n      currentBoardState,\r\n      score,\r\n      currentMove,\r\n      boardConfig,\r\n      wonPlayer,\r\n      isManual,\r\n      bot,\r\n      buttonDisabled,\r\n      handicap,\r\n      showRules,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div style={ {display: 'flex', alignContent: 'center', alignItems: 'center', flexFlow: 'column'}  }>\r\n        {showRules && <div style={{\r\n          position: 'absolute',\r\n          border: '1px solid black',\r\n          width: '300px',\r\n          right: '10px',\r\n          top: '70px',\r\n          fontSize: '12px',\r\n          animation: 'all 1.5s'\r\n        }}>\r\n          <span style={{ fontSize: '15px', fontWeight: 500 }}>Controls:</span>\r\n          <ul>\r\n            <li>Single click on an empty grid to create a player (1 turn)</li>\r\n            <li>Drag the ball (yellow dot) to a free grid provided there are players to jump over</li>\r\n            <li>In one turn multiple jumps can be performed provided they are legal. Jumps are optional and can be stopped at any time.</li>\r\n            <li>Goal is to drag the ball to the opponents goal</li>\r\n            <li>Before a game begins switch to auto or manual will make the game versus computer or another player. Resets after every goal</li>\r\n          </ul>\r\n\r\n          <span style={{ fontSize: '15px', fontWeight: 500 }}>UI:</span>\r\n          <ul>\r\n            <li>Ball: yellow, players: black and transparent circles to show possible ball position in the next move</li>\r\n            <li>Drag the ball and it will show the possible positions</li>\r\n            <li>Blue: neutral position, green: winning position, red: own goal(losing position)</li>\r\n            <li>The game will calculate if the player has already just before the final move and need not be performed manually</li>\r\n          </ul>\r\n        </div>}\r\n        <div style={{flex: 1, width: '90%', borderBottom: '2px solid black', marginBottom: '10px'}}>\r\n          <h1 style={{ margin: 0 }}>PhutBall</h1>\r\n          <span style={{float: 'right', cursor: 'pointer'}} onClick={this.toggleRules}> Rules </span>\r\n        </div>\r\n        <div style={styles.goal}>{PLAYER.OHS.name} Goal</div>\r\n        <div style={{flex: 1}}>\r\n          <Board\r\n            currentPlayer={currentPlayer}\r\n            currentBoardState={currentBoardState}\r\n            disableButtons={this.disableButtonsToggle}\r\n            currentMove={currentMove}\r\n            changeBoardState={this.changeBoardState}\r\n            resetBoard={this.resetBoard}\r\n            switchPlayer={this.switchPlayer}\r\n            addScore={this.addScore}\r\n            updateMove={this.updateMove}\r\n            setPlayerWon={this.setPlayerWon}\r\n            config={boardConfig}\r\n            wonPlayer={wonPlayer}\r\n            isManual={isManual}\r\n            bot={bot}\r\n          />\r\n        </div>\r\n        <div style={styles.goal}>{PLAYER.EKS.name} Goal</div>\r\n        <div style={{flex: 1, padding: '8px', display: 'flex', flexFlow: 'row'}}>\r\n          <div style={{flex: 1 }}>\r\n            <h3 style={{ padding: '4px', margin: 0, textDecoration: 'underline' }}>Scores: </h3>\r\n            <div>\r\n              <span style={currentPlayer.name === PLAYER.EKS.name ? {fontWeight: 700} : null}>\r\n                {PLAYER.EKS.name}: {score.EKS}\r\n              </span>\r\n            </div>\r\n            <div>\r\n              <span style={currentPlayer.name === PLAYER.OHS.name ? {fontWeight: 700} : null}>\r\n                {PLAYER.OHS.name}: {score.OHS} {!isManual && `(auto)`}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div style={{flex: 1, padding: '5px 8px 8px 8px', borderLeft: '1px solid black'}}>\r\n            <strong style={{textDecoration: 'underline'}}>Currently Playing:</strong> {currentPlayer.name}\r\n          </div>\r\n        </div>\r\n        <div style={{flex: 1, width: '400px', textAlign: 'center', borderTop: '2px solid black', borderBottom: '2px solid black', padding: '4px'}}>\r\n          BOARD STATE: {currentBoardState}\r\n          {currentBoardState === BOARDSTATE.PRESTART\r\n          && <div>\r\n            During this time players may choose the handicap required and also select whether to play a 2 person or against the computer\r\n          </div>}\r\n        </div>\r\n        <div style={{flex: 1}}>\r\n          {currentBoardState !== BOARDSTATE.PRESTART\r\n            && <button onClick={() => this.switchPlayer()} disabled={buttonDisabled || !currentMove}>\r\n            <span>\r\n              Give chance to {currentPlayer.name === PLAYER.EKS.name ? PLAYER.OHS.name : PLAYER.EKS.name}\r\n            </span>\r\n          </button>}\r\n          {currentBoardState === BOARDSTATE.PRESTART\r\n            && <button onClick={() => this.changeBoardState(BOARDSTATE.PLAYING)} disabled={buttonDisabled}>\r\n              <span>Start</span>\r\n          </button>}\r\n          {currentBoardState !== BOARDSTATE.PRESTART\r\n            && <button onClick={this.resetBoard} disabled={buttonDisabled}>\r\n              <span>RESET</span>\r\n          </button>}\r\n          {currentBoardState === BOARDSTATE.PRESTART \r\n            && <button onClick={this.toggleAuto} disabled={buttonDisabled}>\r\n              <span>Switch To {isManual ? 'Auto' : 'Manual'}</span>\r\n          </button>}\r\n        </div>\r\n        {currentBoardState === BOARDSTATE.PRESTART && <div style={{flex: 1, paddingTop: '4px', marginTop: '4px', width: '400px', borderTop: '1px solid black', fontSize: '16px', fontWeight: '500'}}>\r\n          Handicap\r\n        </div>}\r\n        {currentBoardState === BOARDSTATE.PRESTART && <div style={{flex: 1, display: 'flex', flexFlow: 'row'}}>\r\n          <div style={{flex: 1}}>\r\n            <select value={handicap.name} onChange={this.handleHandicapNameChange}>\r\n              <option value={PLAYER.OHS.name}>{PLAYER.OHS.name}</option>\r\n              <option value={PLAYER.EKS.name}>{PLAYER.EKS.name}</option>\r\n            </select>\r\n          </div>\r\n          <div style={{flex: 1}}>\r\n            <select value={handicap.value} onChange={this.handleandicapValueChange}>\r\n              <option value={0}>None</option>\r\n              <option value={1}>1</option>\r\n              <option value={2}>2</option>\r\n              <option value={3}>3</option>\r\n              <option value={4}>4</option>\r\n              <option value={5}>5</option>\r\n              <option value={6}>6</option>\r\n            </select>\r\n          </div>\r\n        </div>}\r\n      </div>\r\n    )\r\n  }\r\n}","import PhutBall from './components/PhutBall';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PhutBall />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}